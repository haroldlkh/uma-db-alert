# .github/workflows/monitor.yaml
name: UMA Monitor

on:
  schedule:
    - cron: "0 * * * *"        # hourly schedule stays in place
  workflow_dispatch:           # manual runs for testing
    inputs:
      environment:
        description: "Which environment's secrets?"
        required: false
        default: ""
        type: choice
        options: [staging, prod]
      dry_run:
        description: "Override dry-run? ('true'/'false'); leave blank to use repo var"
        required: false
        default: ""

jobs:
  run:
    # Run on manual clicks OR on scheduled events when RUN_MONITOR is 'true'
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && vars.RUN_MONITOR == 'true') }}

    runs-on: ubuntu-latest

    # Use input env if provided; else fall back to repo variable ENVIRONMENT; else 'staging'
    environment: ${{ (inputs.environment != '' && inputs.environment) || vars.ENVIRONMENT || 'staging' }}

    concurrency:
      group: uma-monitor-${{ github.ref_name }}-${{ (inputs.environment != '' && inputs.environment) || vars.ENVIRONMENT || 'staging' }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install playwright requests pyyaml
          python -m playwright install --with-deps chromium

      - name: Restore UMA state cache
        uses: actions/cache@v4
        with:
          path: ~/.uma_monitor
          key: uma-state-v1

      # Resolve dry-run from input first, else repo variable DRY_RUN (default true)
      - name: Resolve dry-run
        id: cfg
        env:
          DRY_RUN_INPUT: ${{ inputs.dry_run }}
          DRY_RUN_VAR: ${{ vars.DRY_RUN }}
        run: |
          DRY="${DRY_RUN_INPUT:-$DRY_RUN_VAR}"
          if [ -z "$DRY" ]; then DRY="true"; fi
          echo "dry=$DRY" >> "$GITHUB_OUTPUT"

      - name: Run monitor
        env:
          # outputs read these; add more as you add plugins
          DISCORD_WEBHOOK_MAIN: ${{ secrets.DISCORD_WEBHOOK_MAIN }}
        run: |
          [ "${{ steps.cfg.outputs.dry }}" = "true" ] && DRY="--dry-run" || DRY=""
          python uma_monitor.py \
            --targets config/targets.yaml \
            --filters config/filters.yaml \
            --outputs config/outputs.yaml \
            --headless \
            --wait-ms 1500 \
            $DRY
