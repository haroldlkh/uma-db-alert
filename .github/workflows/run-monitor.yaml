name: Run UMA Monitor (reusable)

on:
  workflow_call:
    inputs:
      dry_run:        { type: boolean, default: false }
      sites_path:     { type: string,  required: false }
      environment_name: { type: string, required: true }
    secrets:
      CALLER_DISCORD_WEBHOOK:
        required: true

jobs:
  run:
    environment: ${{ inputs.environment_name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Prepare sites config (path > default)
        id: cfg
        run: |
          if [ -n "${{ inputs.sites_path }}" ] && [ -f "${{ inputs.sites_path }}" ]; then
            cp "${{ inputs.sites_path }}" sites.effective.yaml
          else
            cp config/sites.yaml sites.effective.yaml
          fi
          echo "sites=sites.effective.yaml" >> "$GITHUB_OUTPUT"

      # ---------- STATE CACHE (add these 3 steps) ----------
      - name: Resolve state dir (per repo + environment)
        id: st
        shell: bash
        run: |
          REPO_NS="${GITHUB_REPOSITORY//\//_}"
          ENV_NAME="${{ inputs.environment_name }}"
          DIR="$HOME/.uma_monitor/$REPO_NS/$ENV_NAME"
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"
          mkdir -p "$DIR"

      - name: Restore state cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.st.outputs.dir }}
          key: uma-state-${{ github.repository }}-${{ inputs.environment_name }}-v1-${{ github.run_id }}
          restore-keys: |
            uma-state-${{ github.repository }}-${{ inputs.environment_name }}-v1-

      - name: Set state namespace env
        run: |
          echo "UMA_ENV_NAME=${{ inputs.environment_name }}" >> $GITHUB_ENV
          # optional: pin base dir (utils will append /state)
          echo "UMA_STATE_DIR=${{ steps.st.outputs.dir }}" >> $GITHUB_ENV
      # ------------------------------------------------------

      - name: Cache Playwright browsers (optional)
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-msplaywright-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-msplaywright-

      - name: Install Playwright browsers (Chromium)
        run: python -m playwright install chromium

      - name: Run orchestrator
        env:
          DISCORD_WEBHOOK_MAIN: ${{ secrets.CALLER_DISCORD_WEBHOOK }}
        run: |
          DRY=""
          if [ "${{ inputs.dry_run }}" = "true" ]; then DRY="--dry-run"; fi
          python orchestrator.py \
            --sites "${{ steps.cfg.outputs.sites }}" \
            --outputs config/outputs.yaml \
            $DRY

      - name: Save state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: ${{ steps.st.outputs.dir }}
          key: uma-state-${{ github.repository }}-${{ inputs.environment_name }}-v1-${{ github.run_id }}
