name: Run UMA Monitor (reusable)

on:
  workflow_call:
    inputs:
      dry_run:        { type: boolean, default: false } # if true, creates a log that it would have posted
      sites_path:     { type: string,  required: false }
      environment_name: { type: string, required: true }  # NEW: pass "Staging" or "Prod"
    secrets:
      ENV_DISCORD_WEBHOOK:
        required: true

jobs:
  run:
    # Apply the environment ON THE CALLED JOB so it can read env-scoped secrets
    environment: ${{ inputs.environment_name }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Prepare sites config (path > default)
        id: cfg
        run: |
          if [ -n "${{ inputs.sites_path }}" ] && [ -f "${{ inputs.sites_path }}" ]; then
            cp "${{ inputs.sites_path }}" sites.effective.yaml
          else
            cp config/sites.yaml sites.effective.yaml
          fi
          echo "sites=sites.effective.yaml" >> "$GITHUB_OUTPUT"

      # --- PROBE & MAP ENV SECRET ---
      - name: Probe ENV_DISCORD_WEBHOOK and map to DISCORD_WEBHOOK_MAIN
        run: |
          echo "environment_name=${{ inputs.environment_name }}"
          if [ -z "${{ secrets.ENV_DISCORD_WEBHOOK }}" ]; then
            echo "❌ ENV_DISCORD_WEBHOOK not visible on environment '${{ inputs.environment_name }}'"; exit 1;
          fi
          # Map to the name your plugin expects (from outputs.yaml -> webhook_env)
          echo "DISCORD_WEBHOOK_MAIN=${{ secrets.ENV_DISCORD_WEBHOOK }}" >> "$GITHUB_ENV"
          echo "✅ ENV_DISCORD_WEBHOOK detected and mapped"

      # - name: Restore state # No cache yet
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: ~/.uma_monitor
      #     key: uma-state-v1-${{ github.run_id }}
      #     restore-keys: uma-state-v1-

      - name: Run orchestrator
        env:
          DISCORD_WEBHOOK_MAIN: ${{ env.ENV_DISCORD_WEBHOOK  }}
        run: |
          DRY=""
          if [ "${{ inputs.dry_run }}" = "true" ]; then DRY="--dry-run"; fi
          python "${{ steps.tool.outputs.dir }}/orchestrator.py" \
            --sites "${{ steps.cfg.outputs.sites }}" \
            --outputs "${{ steps.tool.outputs.dir }}/config/outputs.yaml" \
            $DRY

      # - name: Save state # No cache yet
      #   if: always()
      #   uses: actions/cache/save@v4
      #   with:
      #     path: ~/.uma_monitor
      #     key: uma-state-v1-${{ github.run_id }}
