name: Run UMA Monitor (reusable)

on:
  workflow_call:
    inputs:
      dry_run: { type: boolean, default: true }
      sites_path: { type: string, required: false }
      tool_repo:  { type: string, required: false }   # only external callers set this
      tool_ref:   { type: string, required: false, default: "main" }
    secrets:
      DISCORD_WEBHOOK_MAIN: { required: true }

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      # Caller repo (so sites_path works if provided)
      - uses: actions/checkout@v4

      # If tool_repo is provided, checkout your tool repo into ./tool
      - name: Checkout tool repo (if external)
        if: ${{ inputs.tool_repo != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.tool_repo }}
          ref: ${{ inputs.tool_ref }}
          path: tool

      # Decide where the tool code/configs live: '.' (same repo) or 'tool'
      - name: Resolve TOOL_DIR
        id: tool
        run: |
          if [ -n "${{ inputs.tool_repo }}" ]; then echo "dir=tool" >> "$GITHUB_OUTPUT";
          else echo "dir=." >> "$GITHUB_OUTPUT"; fi

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r "${{ steps.tool.outputs.dir }}/requirements.txt"

      - name: Prepare sites config (inline > path > default)
        id: cfg
        run: |
          if [ -n "${{ inputs.sites_path }}" ] && [ -f "${{ inputs.sites_path }}" ]; then
            cp "${{ inputs.sites_path }}" sites.effective.yaml
          else
            cp "${{ steps.tool.outputs.dir }}/config/sites.yaml" sites.effective.yaml
          fi
          echo "sites=sites.effective.yaml" >> "$GITHUB_OUTPUT"

      - name: Restore state
        uses: actions/cache/restore@v4
        with:
          path: ~/.uma_monitor
          key: uma-state-v1-${{ github.run_id }}
          restore-keys: uma-state-v1-

      - name: Run orchestrator
        env:
          DISCORD_WEBHOOK_MAIN: ${{ secrets.DISCORD_WEBHOOK_MAIN }}
        run: |
          DRY=""
          if [ "${{ inputs.dry_run }}" = "true" ]; then DRY="--dry-run"; fi
          python "${{ steps.tool.outputs.dir }}/orchestrator.py" \
            --sites "${{ steps.cfg.outputs.sites }}" \
            --outputs "${{ steps.tool.outputs.dir }}/config/outputs.yaml" \
            $DRY

      - name: Save state
        if: always()
        uses: actions/cache/save@v4
        with:
          path: ~/.uma_monitor
          key: uma-state-v1-${{ github.run_id }}
